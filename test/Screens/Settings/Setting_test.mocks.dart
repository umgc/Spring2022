// Mocks generated by Mockito 5.0.16 from annotations
// in untitled3/test/Screens/Settings/Setting_test.dart.
// Do not manually edit this file.

import 'package:mockito/mockito.dart' as _i1;
import 'package:untitled3/Model/Setting.dart' as _i2;
import 'package:untitled3/Observables/MenuObservable.dart' as _i4;
import 'package:untitled3/Observables/SettingObservable.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSetting_0 extends _i1.Fake implements _i2.Setting {}

/// A class which mocks [SettingObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingObserver extends _i1.Mock implements _i3.SettingObserver {
  MockSettingObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get currentScreen =>
      (super.noSuchMethod(Invocation.getter(#currentScreen), returnValue: '')
          as String);
  @override
  set currentScreen(String? _currentScreen) =>
      super.noSuchMethod(Invocation.setter(#currentScreen, _currentScreen),
          returnValueForMissingStub: null);
  @override
  _i2.Setting get userSettings =>
      (super.noSuchMethod(Invocation.getter(#userSettings),
          returnValue: _FakeSetting_0()) as _i2.Setting);
  @override
  set userSettings(_i2.Setting? _userSettings) =>
      super.noSuchMethod(Invocation.setter(#userSettings, _userSettings),
          returnValueForMissingStub: null);
  @override
  void saveSetting() => super.noSuchMethod(Invocation.method(#saveSetting, []),
      returnValueForMissingStub: null);
  @override
  void initSettings(dynamic settings) =>
      super.noSuchMethod(Invocation.method(#initSettings, [settings]),
          returnValueForMissingStub: null);
  @override
  void changeScreen(String? name) =>
      super.noSuchMethod(Invocation.method(#changeScreen, [name]),
          returnValueForMissingStub: null);
  @override
  void setIsFirstRun(bool? value) =>
      super.noSuchMethod(Invocation.method(#setIsFirstRun, [value]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MenuObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenuObserver extends _i1.Mock implements _i4.MenuObserver {
  MockMenuObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set currentScreen(dynamic _currentScreen) =>
      super.noSuchMethod(Invocation.setter(#currentScreen, _currentScreen),
          returnValueForMissingStub: null);
  @override
  String get focusedIcon =>
      (super.noSuchMethod(Invocation.getter(#focusedIcon), returnValue: '')
          as String);
  @override
  set focusedIcon(String? _focusedIcon) =>
      super.noSuchMethod(Invocation.setter(#focusedIcon, _focusedIcon),
          returnValueForMissingStub: null);
  @override
  void changeScreen(dynamic screen) =>
      super.noSuchMethod(Invocation.method(#changeScreen, [screen]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
