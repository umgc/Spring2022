// Mocks generated by Mockito 5.0.16 from annotations
// in untitled3/test/Screens/Settings/Note/Note_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:untitled3/Model/Note.dart' as _i7;
import 'package:untitled3/Model/Setting.dart' as _i2;
import 'package:untitled3/Observables/MenuObservable.dart' as _i4;
import 'package:untitled3/Observables/NoteObservable.dart' as _i5;
import 'package:untitled3/Observables/SettingObservable.dart' as _i3;
import 'package:untitled3/Utility/Constant.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSetting_0 extends _i1.Fake implements _i2.Setting {}

/// A class which mocks [SettingObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingObserver extends _i1.Mock implements _i3.SettingObserver {
  MockSettingObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get currentScreen =>
      (super.noSuchMethod(Invocation.getter(#currentScreen), returnValue: '')
          as String);
  @override
  set currentScreen(String? _currentScreen) =>
      super.noSuchMethod(Invocation.setter(#currentScreen, _currentScreen),
          returnValueForMissingStub: null);
  @override
  _i2.Setting get userSettings =>
      (super.noSuchMethod(Invocation.getter(#userSettings),
          returnValue: _FakeSetting_0()) as _i2.Setting);
  @override
  set userSettings(_i2.Setting? _userSettings) =>
      super.noSuchMethod(Invocation.setter(#userSettings, _userSettings),
          returnValueForMissingStub: null);
  @override
  void saveSetting() => super.noSuchMethod(Invocation.method(#saveSetting, []),
      returnValueForMissingStub: null);
  @override
  void initSettings(dynamic settings) =>
      super.noSuchMethod(Invocation.method(#initSettings, [settings]),
          returnValueForMissingStub: null);
  @override
  void changeScreen(String? name) =>
      super.noSuchMethod(Invocation.method(#changeScreen, [name]),
          returnValueForMissingStub: null);
  @override
  void setIsFirstRun(bool? value) =>
      super.noSuchMethod(Invocation.method(#setIsFirstRun, [value]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MenuObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenuObserver extends _i1.Mock implements _i4.MenuObserver {
  MockMenuObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set currentScreen(dynamic _currentScreen) =>
      super.noSuchMethod(Invocation.setter(#currentScreen, _currentScreen),
          returnValueForMissingStub: null);
  @override
  String get focusedIcon =>
      (super.noSuchMethod(Invocation.getter(#focusedIcon), returnValue: '')
          as String);
  @override
  set focusedIcon(String? _focusedIcon) =>
      super.noSuchMethod(Invocation.setter(#focusedIcon, _focusedIcon),
          returnValueForMissingStub: null);
  @override
  void changeScreen(dynamic screen) =>
      super.noSuchMethod(Invocation.method(#changeScreen, [screen]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NoteObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteObserver extends _i1.Mock implements _i5.NoteObserver {
  MockNoteObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.NOTE_SCREENS get currentScreen =>
      (super.noSuchMethod(Invocation.getter(#currentScreen),
          returnValue: _i6.NOTE_SCREENS.NOTE) as _i6.NOTE_SCREENS);
  @override
  set currentScreen(_i6.NOTE_SCREENS? _currentScreen) =>
      super.noSuchMethod(Invocation.setter(#currentScreen, _currentScreen),
          returnValueForMissingStub: null);
  @override
  set currNoteForDetails(_i7.TextNote? _currNoteForDetails) => super
      .noSuchMethod(Invocation.setter(#currNoteForDetails, _currNoteForDetails),
          returnValueForMissingStub: null);
  @override
  List<_i7.TextNote> get usersNotes =>
      (super.noSuchMethod(Invocation.getter(#usersNotes),
          returnValue: <_i7.TextNote>[]) as List<_i7.TextNote>);
  @override
  set usersNotes(List<_i7.TextNote>? _usersNotes) =>
      super.noSuchMethod(Invocation.setter(#usersNotes, _usersNotes),
          returnValueForMissingStub: null);
  @override
  Set<_i7.TextNote> get checkListNotes =>
      (super.noSuchMethod(Invocation.getter(#checkListNotes),
          returnValue: <_i7.TextNote>{}) as Set<_i7.TextNote>);
  @override
  set checkListNotes(Set<_i7.TextNote>? _checkListNotes) =>
      super.noSuchMethod(Invocation.setter(#checkListNotes, _checkListNotes),
          returnValueForMissingStub: null);
  @override
  bool get newNoteIsCheckList =>
      (super.noSuchMethod(Invocation.getter(#newNoteIsCheckList),
          returnValue: false) as bool);
  @override
  set newNoteIsCheckList(bool? _newNoteIsCheckList) => super.noSuchMethod(
      Invocation.setter(#newNoteIsCheckList, _newNoteIsCheckList),
      returnValueForMissingStub: null);
  @override
  String get newNoteEventDate =>
      (super.noSuchMethod(Invocation.getter(#newNoteEventDate), returnValue: '')
          as String);
  @override
  set newNoteEventDate(String? _newNoteEventDate) => super.noSuchMethod(
      Invocation.setter(#newNoteEventDate, _newNoteEventDate),
      returnValueForMissingStub: null);
  @override
  String get newNoteEventTime =>
      (super.noSuchMethod(Invocation.getter(#newNoteEventTime), returnValue: '')
          as String);
  @override
  set newNoteEventTime(String? _newNoteEventTime) => super.noSuchMethod(
      Invocation.setter(#newNoteEventTime, _newNoteEventTime),
      returnValueForMissingStub: null);
  @override
  void addNote(_i7.TextNote? note) =>
      super.noSuchMethod(Invocation.method(#addNote, [note]),
          returnValueForMissingStub: null);
  @override
  void deleteNote(_i7.TextNote? note) =>
      super.noSuchMethod(Invocation.method(#deleteNote, [note]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> setCurrNoteIdForDetails(dynamic noteId) =>
      (super.noSuchMethod(Invocation.method(#setCurrNoteIdForDetails, [noteId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void setNotes(dynamic notes) =>
      super.noSuchMethod(Invocation.method(#setNotes, [notes]),
          returnValueForMissingStub: null);
  @override
  List<_i7.TextNote> onSearchNote(String? searchQuery) =>
      (super.noSuchMethod(Invocation.method(#onSearchNote, [searchQuery]),
          returnValue: <_i7.TextNote>[]) as List<_i7.TextNote>);
  @override
  void setCheckList(dynamic listOfNotes) =>
      super.noSuchMethod(Invocation.method(#setCheckList, [listOfNotes]),
          returnValueForMissingStub: null);
  @override
  void clearCheckList() =>
      super.noSuchMethod(Invocation.method(#clearCheckList, []),
          returnValueForMissingStub: null);
  @override
  void changeScreen(_i6.NOTE_SCREENS? name) =>
      super.noSuchMethod(Invocation.method(#changeScreen, [name]),
          returnValueForMissingStub: null);
  @override
  void setNewNoteAIsCheckList(bool? value) =>
      super.noSuchMethod(Invocation.method(#setNewNoteAIsCheckList, [value]),
          returnValueForMissingStub: null);
  @override
  void setNewNoteEventDate(String? value) =>
      super.noSuchMethod(Invocation.method(#setNewNoteEventDate, [value]),
          returnValueForMissingStub: null);
  @override
  void setNewNoteEventTime(String? value) =>
      super.noSuchMethod(Invocation.method(#setNewNoteEventTime, [value]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
