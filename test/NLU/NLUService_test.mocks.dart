// Mocks generated by Mockito 5.0.16 from annotations
// in untitled3/test/NLU/NLUService_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:untitled3/Services/NLU/BertQA/BertQAHelperService.dart' as _i2;
import 'package:untitled3/Services/NLU/BertQA/BertQaService.dart' as _i4;
import 'package:untitled3/Services/NLU/Bot/LexService.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBertQuestionAnswererTaskService_0 extends _i1.Fake
    implements _i2.BertQuestionAnswererTaskService {}

class _FakeResponse_1 extends _i1.Fake implements _i3.Response {}

/// A class which mocks [BertQAService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBertQAService extends _i1.Mock implements _i4.BertQAService {
  MockBertQAService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BertQuestionAnswererTaskService get bertQuestionAnswerer =>
      (super.noSuchMethod(Invocation.getter(#bertQuestionAnswerer),
              returnValue: _FakeBertQuestionAnswererTaskService_0())
          as _i2.BertQuestionAnswererTaskService);
  @override
  set bertQuestionAnswerer(
          _i2.BertQuestionAnswererTaskService? _bertQuestionAnswerer) =>
      super.noSuchMethod(
          Invocation.setter(#bertQuestionAnswerer, _bertQuestionAnswerer),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> createClassifier() =>
      (super.noSuchMethod(Invocation.method(#createClassifier, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  List<_i2.QaAnswer> answer(String? context, String? question) =>
      (super.noSuchMethod(Invocation.method(#answer, [context, question]),
          returnValue: <_i2.QaAnswer>[]) as List<_i2.QaAnswer>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LexService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLexService extends _i1.Mock implements _i6.LexService {
  MockLexService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> loadCredentials() =>
      (super.noSuchMethod(Invocation.method(#loadCredentials, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<Map<String, dynamic>> getLexResponse(
          {String? text, String? userId, String? locale}) =>
      (super.noSuchMethod(
              Invocation.method(#getLexResponse, [],
                  {#text: text, #userId: userId, #locale: locale}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i5.Future<Map<String, dynamic>>);
  @override
  _i5.Future<_i3.Response> makeLexPost(
          Uri? uri, Map<String, String>? mapHeader, String? body) =>
      (super.noSuchMethod(
              Invocation.method(#makeLexPost, [uri, mapHeader, body]),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i5.Future<_i3.Response>);
  @override
  String toString() => super.toString();
}
